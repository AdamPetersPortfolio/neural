import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import dynamic from 'next/dynamic'
import { useState, useEffect } from 'react';
function useWindowSize() {
  // Initialize state with undefined width/height so server and client renders match
  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/
  const [windowSize, setWindowSize] = useState({
    width: undefined,
    height: undefined,
  });

  useEffect(() => {
    // only execute all the code below in client side
    if (typeof window !== 'undefined') {
      // Handler to call on window resize
      function handleResize() {
        // Set window width/height to state
        setWindowSize({
          width: window.innerWidth,
          height: window.innerHeight,
        });
      }

      // Add event listener
      window.addEventListener("resize", handleResize);

      // Call handler right away so state gets updated with initial window size
      handleResize();

      // Remove event listener on cleanup
      return () => window.removeEventListener("resize", handleResize);
    }
  }, []); // Empty array ensures that effect is only run on mount
  return windowSize;
}


class neuron {
  constructor(x, y) {
    this.x = x;
    this.y = y;
    this.connections = new Array();
    this.strength = 0;
    this.decay = 0.3;
    this.propogation = -1;
    this.cooldown = 0;
  }

  update() {
    if (this.strength > 0) {
      this.strength -= this.decay;
    } else {
      this.strength = 0;
    }

    if (this.cooldown > 0) {
      this.cooldown -= 1;
    }

    if (this.propogation >= this.connections.length) {
      this.propogation -= 1;
    } else if (this.propogation >= 0) {
      this.cooldown = 60;
      for (let i = 0; i < this.connections.length; i++) {
        if (this.connections[i].cooldown <= 0 && this.connections[i].strength <= 1) {
          this.connections[i].propogation = Math.floor(random(10, 20));
          this.connections[i].strength = Math.floor(random(7, 10));
        }
      }
      this.propogation = -1;
    }
  }
}

const Sketch = dynamic(() => import('react-p5').then((mod) => mod.default), {
  ssr: false,
})
let x = 50;
let y = 50;
let neurons;
let distance = 130;
let numNeurons = 120;
let width;
let height;

function random(min, max) {
  return Math.random() * (max - min) + min;
}

function dist(x1, y1, x2, y2) {
  return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
}

const generateNeurons = (s) => {
  let neurons = [];
  for (let i = 0; i < s; i++) {
    neurons.push(new neuron(random(50, width - 50), (random(50, height - 50))));
  }
  console.log(neurons);
  for (let i = 0; i < s; i++) {
    for (let z = 0; z < s; z++) {
      if (dist(neurons[i].x, neurons[i].y, neurons[z].x, neurons[z].y) < distance) {
        neurons[i].connections.push(neurons[z]);
      }
    }
  }

  return neurons;
}

export default function Home() {
  const size = useWindowSize();
  width = Math.floor(size.width / 2);
  height = size.height - 5;
  const setup = (p5, canvasParentRef) => {

    p5.createCanvas(width, height).parent(canvasParentRef);
    p5.fill(255, 50, 50)
    p5.strokeWeight(1);
    p5.noStroke();
    neurons = generateNeurons(numNeurons);
  };

  // const mouseDragged = (p5) => {

  // }

  const draw = (p5) => {
    p5.background(0);
    for (let i = 0; i < numNeurons; i++) {
      let n = neurons[i];
      n.update();
      p5.push();
      p5.stroke(p5.map(n.strength, 0, 10, 100, 240));
      n.connections.forEach(c => {
        p5.line(n.x, n.y, c.x, c.y);
      })
      p5.pop();
    }
    for (let i = 0; i < numNeurons; i++) {
      let n = neurons[i];
      if (p5.dist(p5.mouseX, p5.mouseY, n.x, n.y) < 15) {
        if (p5.mouseIsPressed) {
          n.propogation = 10;
          n.strength = 10;
        }
        p5.push();
        p5.stroke(0, 0, 0);
        p5.ellipse(n.x, n.y, 20, 20);
        p5.pop();
      } else {
        p5.push()
        p5.stroke(0)
        p5.strokeWeight(1)
        p5.ellipse(n.x, n.y, 10, 10)
        p5.pop()
      }
    }
  };

  return <div style={{ backgroundColor: 'black', width: "100vw", height: "100vh" }}><Sketch setup={setup} draw={draw} /></div>;
};

// export default function Home() {
//   return (
//     <div className={styles.container}>
//       <Head>
//         <title>Create Next App</title>
//         <meta name="description" content="Generated by create next app" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>
//       <iframe style={{
//         position: "fixed",
//         top: 0,
//         left: 0,
//         bottom: 0,
//         right: 0,
//         width: "100%",
//         height: "100%",
//         border: "none",
//         margin: 0,
//         padding: 0,
//       }}
//         src="https://editor.p5js.org/petersadam18/full/Fr3qtT46a"></iframe>
//     </div>
//   )
// }
